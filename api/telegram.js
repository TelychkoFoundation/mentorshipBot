import { Telegraf } from 'telegraf';
import { connectToDB } from '../lib/db.js';
import User from "../models/User.js";
import dotenv from 'dotenv';

dotenv.config();

const bot = new Telegraf(process.env.BOT_TOKEN);

bot.launch({
    webhook: {
        domain: "https://mentorship-bot.vercel.app/api/telegram", // Replace with your domain
    },
});

// —Ä–µ—î—Å—Ç—Ä—É—î–º–æ —Ö–µ–Ω–¥–ª–µ—Ä–∏ —Ç—É—Ç, –±–æ Vercel –∫–æ–∂–µ–Ω —Ä–∞–∑ –≤–∏–∫–ª–∏–∫–∞—î —Ü—é —Ñ—É–Ω–∫—Ü—ñ—é –æ–∫—Ä–µ–º–æ
bot.start(async (ctx) => {
    console.log('üöÄ /start –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–∏–π–Ω—è—Ç–∞:', ctx.from);
    await connectToDB();

    const { id, username } = ctx.from;

    const user = await User.findOne({ id });
    if (!user) {
        await ctx.reply("‚ùóÔ∏è–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ó–≤–µ—Ä–Ω–∏—Å—å –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.");
    } else {
        await ctx.reply(`üëã –ó–Ω–æ–≤—É –ø—Ä–∏–≤—ñ—Ç, ${username}!`);
    }
});

export default async function handler(req, res) {
    if (req.method === 'POST') {
        try {
            await bot.handleUpdate(req.body);
        } catch (err) {
            console.error('Telegram bot error:', err);
        }
        res.status(200).send('OK');
    } else {
        res.status(405).send('Method Not Allowed');
    }
}
